{
  "compiler": {
    "version": "0.8.15+commit.e14f2714"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "operation",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "contractAddress",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "ContractCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "operation",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "Executed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "operation",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "execute",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "result",
            "type": "bytes"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "Fabian Vogelsteller <fabian@lukso.network>",
      "details": "Implementation of a contract module which provides the ability to call arbitrary functions at any other smart contract and itself, including using `delegatecall`, `staticcall` as well creating contracts using `create` and `create2` This is the basis for a smart contract based account system, but could also be used as a proxy account system",
      "kind": "dev",
      "methods": {
        "execute(uint256,address,uint256,bytes)": {
          "details": "Executes any other smart contract. SHOULD only be callable by the owner of the contract set via ERC173 Emits a {Executed} event, when a call is executed under `operationType` 0, 3 and 4 Emits a {ContractCreated} event, when a contract is created under `operationType` 1 and 2",
          "params": {
            "data": "The call data, or the bytecode of the contract to deploy",
            "operationType": "The operation to execute: CALL = 0 CREATE = 1 CREATE2 = 2 STATICCALL = 3 DELEGATECALL = 4",
            "to": "The smart contract or address to interact with, `to` will be unused if a contract is created (operation 1 and 2)",
            "value": "The amount of native tokens to transfer (in Wei)."
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "title": "Core implementation of ERC725 X executor",
      "version": 1
    },
    "userdoc": {
      "events": {
        "ContractCreated(uint256,address,uint256)": {
          "notice": "Emitted when a contract is created"
        },
        "Executed(uint256,address,uint256,bytes4)": {
          "notice": "Emitted when a contract executed."
        }
      },
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "packages/foundry-ts/lib/ERC725/implementations/contracts/ERC725XCore.sol": "ERC725XCore"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@erc725/smart-contracts/contracts/=packages/foundry-ts/lib/ERC725/implementations/contracts/",
      ":@lukso/lsp-smart-contracts/=packages/foundry-ts/lib/lsp-smart-contracts/",
      ":@openzeppelin/=packages/foundry-ts/lib/openzeppelin-contracts/",
      ":ERC725/=packages/foundry-ts/lib/ERC725/",
      ":ds-test/=packages/foundry-ts/lib/solmate/lib/ds-test/src/",
      ":forge-std/=packages/foundry-ts/lib/forge-std/src/",
      ":lsp-smart-contracts/=packages/foundry-ts/lib/lsp-smart-contracts/contracts/",
      ":openzeppelin-contracts/=packages/foundry-ts/lib/openzeppelin-contracts/",
      ":solidity-bytes-utils/=packages/foundry-ts/lib/solidity-bytes-utils/contracts/",
      ":solidity-bytes-utils/contracts/=packages/foundry-ts/lib/solidity-bytes-utils/contracts/",
      ":solmate/=packages/foundry-ts/lib/solmate/src/"
    ]
  },
  "sources": {
    "packages/foundry-ts/lib/ERC725/implementations/contracts/ERC725XCore.sol": {
      "keccak256": "0x2aaf7cb46208ff81de78c7c573309ee642610a6e038c82ff1b0e33afa2dc8943",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1b4ada1f1ff666dd21f554e3cc5470bbee5de648b7c7a68051bf47be370cfbf4",
        "dweb:/ipfs/QmNVsfVSM9TmUVgSeHAWsZmJdDCT8KyfnLFD61oumA2ENT"
      ]
    },
    "packages/foundry-ts/lib/ERC725/implementations/contracts/constants.sol": {
      "keccak256": "0xdf3d466e2d6f8d0f2e288ee01edb0cf7de2db9cac3c257b7d6a6284adf4b2480",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://16e4a90c8f2d245621808320ed6aa4ad7fcfd50b36df116e8447e5fc1700d7a9",
        "dweb:/ipfs/QmT4E9cSMuwpiABbdKExNn3Ef9wmjdmv3E9MuwkmkDv6BY"
      ]
    },
    "packages/foundry-ts/lib/ERC725/implementations/contracts/custom/OwnableUnset.sol": {
      "keccak256": "0xe77afcd7d2496c79578ff7f219c0fad901fa4e0421f9ba389eb5f5eb7d9f1dcf",
      "license": "MIT",
      "urls": [
        "bzz-raw://bc4186cf3bffd2b00017463ead8dfdef4c09e47fa943788beec42c4b66253f9e",
        "dweb:/ipfs/QmXvQwkdxHjUJzfs8P86JJbS3aqSgXhxKt4zYSkjW3hnqP"
      ]
    },
    "packages/foundry-ts/lib/ERC725/implementations/contracts/interfaces/IERC725X.sol": {
      "keccak256": "0xa2e2c7401e7443955ca766eb0cea55c476af0ad1fd8a311e6b2e2b3d51f64132",
      "license": "CC0-1.0",
      "urls": [
        "bzz-raw://27d53e130e7afb0933aa94f3a30ff0595e22ee8c76a52bf6fd743c1268e5bb89",
        "dweb:/ipfs/QmS9EySBRM84T11VekkdJvqgFV7sf4HofPz7LLmPmLbsZC"
      ]
    },
    "packages/foundry-ts/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0xa708703e3d62e8bb7c31d28c238e756ebcc12b9af57e6fa941cf9adc1daba8ae",
      "license": "MIT",
      "urls": [
        "bzz-raw://78110f6e83d8210e27221d3be77d31c4468d40435dd2a9986dff92829ab8f3e3",
        "dweb:/ipfs/QmXEsx612M31QmNzVc7X7Qcrpeug81ykfERhdsjxakntGA"
      ]
    },
    "packages/foundry-ts/lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
      "keccak256": "0xc756688db2786cc325e5adafd1b3cdd75d10823cef9d344a1502e77ac79e5116",
      "license": "MIT",
      "urls": [
        "bzz-raw://2ec3cc020e6cc7554ec73502bbce3ab2fb8c4b493bee4b0832a71f52eb997924",
        "dweb:/ipfs/Qmd6MYSGpUpatptv9jPhyDhrbhjPC4wftUScTQaE8MVx1L"
      ]
    },
    "packages/foundry-ts/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "packages/foundry-ts/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "packages/foundry-ts/lib/solidity-bytes-utils/contracts/BytesLib.sol": {
      "keccak256": "0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29",
      "license": "Unlicense",
      "urls": [
        "bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014",
        "dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn"
      ]
    }
  },
  "version": 1
}