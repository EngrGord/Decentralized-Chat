{
  "compiler": {
    "version": "0.8.15+commit.e14f2714"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "typeId",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes",
            "name": "returnedValue",
            "type": "bytes"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "receivedData",
            "type": "bytes"
          }
        ],
        "name": "UniversalReceiver",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "typeId",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "universalReceiver",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received",
      "events": {
        "UniversalReceiver(address,uint256,bytes32,bytes,bytes)": {
          "params": {
            "from": "The address calling the universalReceiver function",
            "receivedData": "The arbitrary data passed to universalReceiver function",
            "returnedValue": "The return value of universalReceiver function",
            "typeId": "The hash of a specific standard or a hook",
            "value": "The amount sent to the universalReceiver function"
          }
        }
      },
      "kind": "dev",
      "methods": {
        "universalReceiver(bytes32,bytes)": {
          "details": "Emits an event when it's succesfully executed Call the universalReceiverDelegate function in the UniversalReceiverDelegate (URD) contract, if the address of the URD was set as a value for the `_UniversalReceiverKey` in the account key/value value store of the same contract implementing the universalReceiver function and if the URD contract has the LSP1UniversalReceiverDelegate Interface Id registred using ERC165 Emits a {UniversalReceiver} event",
          "params": {
            "data": "The arbitrary data received with the call",
            "typeId": "The hash of a specific standard or a hook"
          }
        }
      },
      "title": "The interface for LSP1UniversalReceiver",
      "version": 1
    },
    "userdoc": {
      "events": {
        "UniversalReceiver(address,uint256,bytes32,bytes,bytes)": {
          "notice": "Emitted when the universalReceiver function is succesfully executed"
        }
      },
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "packages/foundry-ts/lib/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol": "ILSP1UniversalReceiver"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@erc725/smart-contracts/contracts/=packages/foundry-ts/lib/ERC725/implementations/contracts/",
      ":@lukso/lsp-smart-contracts/=packages/foundry-ts/lib/lsp-smart-contracts/",
      ":@openzeppelin/=packages/foundry-ts/lib/openzeppelin-contracts/",
      ":ERC725/=packages/foundry-ts/lib/ERC725/",
      ":ds-test/=packages/foundry-ts/lib/solmate/lib/ds-test/src/",
      ":forge-std/=packages/foundry-ts/lib/forge-std/src/",
      ":lsp-smart-contracts/=packages/foundry-ts/lib/lsp-smart-contracts/contracts/",
      ":openzeppelin-contracts/=packages/foundry-ts/lib/openzeppelin-contracts/",
      ":solidity-bytes-utils/=packages/foundry-ts/lib/solidity-bytes-utils/contracts/",
      ":solidity-bytes-utils/contracts/=packages/foundry-ts/lib/solidity-bytes-utils/contracts/",
      ":solmate/=packages/foundry-ts/lib/solmate/src/"
    ]
  },
  "sources": {
    "packages/foundry-ts/lib/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol": {
      "keccak256": "0xbca7d0f76e439ee3302096f8ecaf8a506434a83c86639c95efd79e6b89d364ae",
      "license": "CC0-1.0",
      "urls": [
        "bzz-raw://c4e3931e406a2e0c69bd5a7c5a677541a36dcdda01682e46bf7180bc814495a7",
        "dweb:/ipfs/QmWRZZ2XerqFttSpcCv27Fk4bTzHAVaKHFxCLYGFmYj1uK"
      ]
    }
  },
  "version": 1
}