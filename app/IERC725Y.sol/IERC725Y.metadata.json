{
  "compiler": {
    "version": "0.8.15+commit.e14f2714"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "dataKey",
            "type": "bytes32"
          }
        ],
        "name": "DataChanged",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32[]",
            "name": "dataKeys",
            "type": "bytes32[]"
          }
        ],
        "name": "getData",
        "outputs": [
          {
            "internalType": "bytes[]",
            "name": "dataValues",
            "type": "bytes[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "dataKey",
            "type": "bytes32"
          }
        ],
        "name": "getData",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "dataValue",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32[]",
            "name": "dataKeys",
            "type": "bytes32[]"
          },
          {
            "internalType": "bytes[]",
            "name": "dataValues",
            "type": "bytes[]"
          }
        ],
        "name": "setData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "dataKey",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "dataValue",
            "type": "bytes"
          }
        ],
        "name": "setData",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage",
      "events": {
        "DataChanged(bytes32)": {
          "params": {
            "dataKey": "The data key which value is set"
          }
        }
      },
      "kind": "dev",
      "methods": {
        "getData(bytes32)": {
          "params": {
            "dataKey": "The key which value to retrieve"
          },
          "returns": {
            "dataValue": "The data stored at the key"
          }
        },
        "getData(bytes32[])": {
          "params": {
            "dataKeys": "The array of keys which values to retrieve"
          },
          "returns": {
            "dataValues": "The array of data stored at multiple keys"
          }
        },
        "setData(bytes32,bytes)": {
          "params": {
            "dataKey": "The key to retrieve stored value",
            "dataValue": "The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event."
          }
        },
        "setData(bytes32[],bytes[])": {
          "details": "Sets array of data for multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.",
          "params": {
            "dataKeys": "The array of data keys for values to set",
            "dataValues": "The array of values to set"
          }
        },
        "supportsInterface(bytes4)": {
          "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
        }
      },
      "title": "The interface for ERC725Y General data key/value store",
      "version": 1
    },
    "userdoc": {
      "events": {
        "DataChanged(bytes32)": {
          "notice": "Emitted when data at a key is changed"
        }
      },
      "kind": "user",
      "methods": {
        "getData(bytes32)": {
          "notice": "Gets singular data at a given `dataKey`"
        },
        "getData(bytes32[])": {
          "notice": "Gets array of data for multiple given keys"
        },
        "setData(bytes32,bytes)": {
          "notice": "Sets singular data for a given `dataKey`"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "packages/foundry-ts/lib/ERC725/implementations/contracts/interfaces/IERC725Y.sol": "IERC725Y"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@erc725/smart-contracts/contracts/=packages/foundry-ts/lib/ERC725/implementations/contracts/",
      ":@lukso/lsp-smart-contracts/=packages/foundry-ts/lib/lsp-smart-contracts/",
      ":@openzeppelin/=packages/foundry-ts/lib/openzeppelin-contracts/",
      ":ERC725/=packages/foundry-ts/lib/ERC725/",
      ":ds-test/=packages/foundry-ts/lib/solmate/lib/ds-test/src/",
      ":forge-std/=packages/foundry-ts/lib/forge-std/src/",
      ":lsp-smart-contracts/=packages/foundry-ts/lib/lsp-smart-contracts/contracts/",
      ":openzeppelin-contracts/=packages/foundry-ts/lib/openzeppelin-contracts/",
      ":solidity-bytes-utils/=packages/foundry-ts/lib/solidity-bytes-utils/contracts/",
      ":solidity-bytes-utils/contracts/=packages/foundry-ts/lib/solidity-bytes-utils/contracts/",
      ":solmate/=packages/foundry-ts/lib/solmate/src/"
    ]
  },
  "sources": {
    "packages/foundry-ts/lib/ERC725/implementations/contracts/interfaces/IERC725Y.sol": {
      "keccak256": "0x88a85aac90cb593ef4366d0ffbac4d05a06fa8b875727350ae91237f9192c4a2",
      "license": "CC0-1.0",
      "urls": [
        "bzz-raw://c26ce947741db7ce5492d8a83f8594eb39915aaa645eb2954b37e583be863887",
        "dweb:/ipfs/QmaafqqnTyY8XAt9Rt8k1G9xurkcMDFWWfxRMCYG38ZK1J"
      ]
    },
    "packages/foundry-ts/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    }
  },
  "version": 1
}